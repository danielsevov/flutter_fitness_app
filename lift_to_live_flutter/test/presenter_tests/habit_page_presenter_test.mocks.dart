// Mocks generated by Mockito 5.3.2 from annotations
// in lift_to_live_flutter/test/presenter_tests/habit_page_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter/material.dart' as _i7;
import 'package:lift_to_live_flutter/domain/entities/habit.dart' as _i2;
import 'package:lift_to_live_flutter/domain/entities/habit_task.dart' as _i5;
import 'package:lift_to_live_flutter/domain/repositories/habits_repo.dart'
    as _i3;
import 'package:lift_to_live_flutter/presentation/views/habits_page_view.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHabit_0 extends _i1.SmartFake implements _i2.Habit {
  _FakeHabit_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HabitsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitsRepository extends _i1.Mock implements _i3.HabitsRepository {
  MockHabitsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> patchHabit(
    int? id,
    String? date,
    String? note,
    String? userId,
    String? coachId,
    List<_i5.HabitTask>? habits,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchHabit,
          [
            id,
            date,
            note,
            userId,
            coachId,
            habits,
            jwtToken,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<_i2.Habit> fetchTemplate(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTemplate,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i4.Future<_i2.Habit>.value(_FakeHabit_0(
          this,
          Invocation.method(
            #fetchTemplate,
            [
              userId,
              jwtToken,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Habit>);
  @override
  _i4.Future<List<_i2.Habit>> fetchHabits(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchHabits,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i4.Future<List<_i2.Habit>>.value(<_i2.Habit>[]),
      ) as _i4.Future<List<_i2.Habit>>);
  @override
  _i4.Future<void> postHabit(
    String? date,
    String? note,
    String? userId,
    String? coachId,
    bool? isTemplate,
    List<_i5.HabitTask>? habits,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postHabit,
          [
            date,
            note,
            userId,
            coachId,
            isTemplate,
            habits,
            jwtToken,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [HabitsPageView].
///
/// See the documentation for Mockito's code generation for more information.
class MockHabitsPageView extends _i1.Mock implements _i6.HabitsPageView {
  MockHabitsPageView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setHabitData(List<_i7.Widget>? list) => super.noSuchMethod(
        Invocation.method(
          #setHabitData,
          [list],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setInProgress(bool? inProgress) => super.noSuchMethod(
        Invocation.method(
          #setInProgress,
          [inProgress],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFetched(bool? inProgress) => super.noSuchMethod(
        Invocation.method(
          #setFetched,
          [inProgress],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyNoHabitsFound() => super.noSuchMethod(
        Invocation.method(
          #notifyNoHabitsFound,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
