// Mocks generated by Mockito 5.3.2 from annotations
// in lift_to_live_flutter/test/presenter_tests/home_page_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:flutter/foundation.dart' as _i7;
import 'package:flutter/material.dart' as _i6;
import 'package:lift_to_live_flutter/domain/entities/image.dart' as _i4;
import 'package:lift_to_live_flutter/domain/entities/news.dart' as _i2;
import 'package:lift_to_live_flutter/domain/entities/role.dart' as _i11;
import 'package:lift_to_live_flutter/domain/entities/user.dart' as _i3;
import 'package:lift_to_live_flutter/domain/repositories/news_repo.dart' as _i8;
import 'package:lift_to_live_flutter/domain/repositories/user_repo.dart'
    as _i10;
import 'package:lift_to_live_flutter/presentation/ui/widgets/log_out_dialog.dart'
    as _i12;
import 'package:lift_to_live_flutter/presentation/views/home_page_view.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNews_0 extends _i1.SmartFake implements _i2.News {
  _FakeNews_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMyImage_2 extends _i1.SmartFake implements _i4.MyImage {
  _FakeMyImage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHomePageView_3 extends _i1.SmartFake implements _i5.HomePageView {
  _FakeHomePageView_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeState_4<T extends _i6.StatefulWidget> extends _i1.SmartFake
    implements _i6.State<T> {
  _FakeState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_5 extends _i1.SmartFake
    implements _i6.StatefulElement {
  _FakeStatefulElement_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_6 extends _i1.SmartFake
    implements _i6.DiagnosticsNode {
  _FakeDiagnosticsNode_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i7.TextTreeConfiguration? parentConfiguration,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info,
  }) =>
      super.toString();
}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i8.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.News> getNews(
    String? search,
    int? count,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNews,
          [
            search,
            count,
          ],
        ),
        returnValue: _i9.Future<_i2.News>.value(_FakeNews_0(
          this,
          Invocation.method(
            #getNews,
            [
              search,
              count,
            ],
          ),
        )),
      ) as _i9.Future<_i2.News>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i10.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<_i11.Role>> fetchUserRoles(String? jwtToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserRoles,
          [jwtToken],
        ),
        returnValue: _i9.Future<List<_i11.Role>>.value(<_i11.Role>[]),
      ) as _i9.Future<List<_i11.Role>>);
  @override
  _i9.Future<_i3.User> fetchUser(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUser,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #fetchUser,
            [
              userId,
              jwtToken,
            ],
          ),
        )),
      ) as _i9.Future<_i3.User>);
  @override
  _i9.Future<List<_i3.User>> fetchMyTrainees(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMyTrainees,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i9.Future<List<_i3.User>>);
  @override
  _i9.Future<List<_i4.MyImage>> getUserImages(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserImages,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<List<_i4.MyImage>>.value(<_i4.MyImage>[]),
      ) as _i9.Future<List<_i4.MyImage>>);
  @override
  _i9.Future<_i4.MyImage> fetchProfileImage(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfileImage,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<_i4.MyImage>.value(_FakeMyImage_2(
          this,
          Invocation.method(
            #fetchProfileImage,
            [
              userId,
              jwtToken,
            ],
          ),
        )),
      ) as _i9.Future<_i4.MyImage>);
  @override
  _i9.Future<void> patchImage(
    int? id,
    String? userId,
    String? date,
    String? encoded,
    String? type,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchImage,
          [
            id,
            userId,
            date,
            encoded,
            type,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> postImage(
    String? userId,
    String? date,
    String? encoded,
    String? type,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postImage,
          [
            userId,
            date,
            encoded,
            type,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> deleteImage(
    int? id,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteImage,
          [
            id,
            jwtToken,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [HomePageView].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePageView extends _i1.Mock implements _i5.HomePageView {
  MockHomePageView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setUserData(
    _i3.User? user,
    _i6.Image? profilePicture,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [
            user,
            profilePicture,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setNewsData(_i2.News? currentNews) => super.noSuchMethod(
        Invocation.method(
          #setNewsData,
          [currentNews],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setInProgress(bool? inProgress) => super.noSuchMethod(
        Invocation.method(
          #setInProgress,
          [inProgress],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFetched(bool? fetched) => super.noSuchMethod(
        Invocation.method(
          #setFetched,
          [fetched],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyWrongURL(String? s) => super.noSuchMethod(
        Invocation.method(
          #notifyWrongURL,
          [s],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void habitsPressed(
    _i6.BuildContext? context,
    bool? bottomBarButton,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #habitsPressed,
          [
            context,
            bottomBarButton,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void profilePressed(
    _i6.BuildContext? context,
    bool? bottomBarButton,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #profilePressed,
          [
            context,
            bottomBarButton,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logOutPressed(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #logOutPressed,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void traineesPressed(
    _i6.BuildContext? context,
    bool? bottomBarButton,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #traineesPressed,
          [
            context,
            bottomBarButton,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LogOutDialog].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogOutDialog extends _i1.Mock implements _i12.LogOutDialog {
  MockLogOutDialog() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.HomePageView get view => (super.noSuchMethod(
        Invocation.getter(#view),
        returnValue: _FakeHomePageView_3(
          this,
          Invocation.getter(#view),
        ),
      ) as _i5.HomePageView);
  @override
  _i6.State<_i6.StatefulWidget> createState() => (super.noSuchMethod(
        Invocation.method(
          #createState,
          [],
        ),
        returnValue: _FakeState_4<_i6.StatefulWidget>(
          this,
          Invocation.method(
            #createState,
            [],
          ),
        ),
      ) as _i6.State<_i6.StatefulWidget>);
  @override
  _i6.StatefulElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeStatefulElement_5(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i6.StatefulElement);
  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: '',
      ) as String);
  @override
  void debugFillProperties(_i7.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );
  @override
  String toStringShallow({
    String? joiner = r', ',
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: '',
      ) as String);
  @override
  _i6.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i7.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_6(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i6.DiagnosticsNode);
  @override
  List<_i6.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i6.DiagnosticsNode>[],
      ) as List<_i6.DiagnosticsNode>);
  @override
  String toString({_i6.DiagnosticLevel? minLevel = _i6.DiagnosticLevel.info}) =>
      super.toString();
}
