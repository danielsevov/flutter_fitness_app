// Mocks generated by Mockito 5.3.2 from annotations
// in lift_to_live_flutter/test/presenter_tests/home_page_presenter_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:flutter/material.dart' as _i11;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i5;
import 'package:lift_to_live_flutter/domain/entities/image.dart' as _i4;
import 'package:lift_to_live_flutter/domain/entities/news.dart' as _i2;
import 'package:lift_to_live_flutter/domain/entities/role.dart' as _i9;
import 'package:lift_to_live_flutter/domain/entities/user.dart' as _i3;
import 'package:lift_to_live_flutter/domain/repositories/news_repo.dart' as _i6;
import 'package:lift_to_live_flutter/domain/repositories/user_repo.dart' as _i8;
import 'package:lift_to_live_flutter/presentation/views/home_page_view.dart'
    as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNews_0 extends _i1.SmartFake implements _i2.News {
  _FakeNews_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUser_1 extends _i1.SmartFake implements _i3.User {
  _FakeUser_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMyImage_2 extends _i1.SmartFake implements _i4.MyImage {
  _FakeMyImage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSOptions_3 extends _i1.SmartFake implements _i5.IOSOptions {
  _FakeIOSOptions_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAndroidOptions_4 extends _i1.SmartFake
    implements _i5.AndroidOptions {
  _FakeAndroidOptions_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeLinuxOptions_5 extends _i1.SmartFake implements _i5.LinuxOptions {
  _FakeLinuxOptions_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWindowsOptions_6 extends _i1.SmartFake
    implements _i5.WindowsOptions {
  _FakeWindowsOptions_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebOptions_7 extends _i1.SmartFake implements _i5.WebOptions {
  _FakeWebOptions_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeMacOsOptions_8 extends _i1.SmartFake implements _i5.MacOsOptions {
  _FakeMacOsOptions_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NewsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNewsRepository extends _i1.Mock implements _i6.NewsRepository {
  MockNewsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.News> getNews(
    String? search,
    int? count,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNews,
          [
            search,
            count,
          ],
        ),
        returnValue: _i7.Future<_i2.News>.value(_FakeNews_0(
          this,
          Invocation.method(
            #getNews,
            [
              search,
              count,
            ],
          ),
        )),
      ) as _i7.Future<_i2.News>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i8.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i9.Role>> fetchUserRoles(String? jwtToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserRoles,
          [jwtToken],
        ),
        returnValue: _i7.Future<List<_i9.Role>>.value(<_i9.Role>[]),
      ) as _i7.Future<List<_i9.Role>>);
  @override
  _i7.Future<_i3.User> fetchUser(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUser,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<_i3.User>.value(_FakeUser_1(
          this,
          Invocation.method(
            #fetchUser,
            [
              userId,
              jwtToken,
            ],
          ),
        )),
      ) as _i7.Future<_i3.User>);
  @override
  _i7.Future<List<_i3.User>> fetchMyTrainees(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchMyTrainees,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<List<_i3.User>>.value(<_i3.User>[]),
      ) as _i7.Future<List<_i3.User>>);
  @override
  _i7.Future<List<_i4.MyImage>> fetchUserImages(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchUserImages,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<List<_i4.MyImage>>.value(<_i4.MyImage>[]),
      ) as _i7.Future<List<_i4.MyImage>>);
  @override
  _i7.Future<_i4.MyImage> fetchProfileImage(
    String? userId,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchProfileImage,
          [
            userId,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<_i4.MyImage>.value(_FakeMyImage_2(
          this,
          Invocation.method(
            #fetchProfileImage,
            [
              userId,
              jwtToken,
            ],
          ),
        )),
      ) as _i7.Future<_i4.MyImage>);
  @override
  _i7.Future<void> patchImage(
    int? id,
    String? userId,
    String? date,
    String? encoded,
    String? type,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #patchImage,
          [
            id,
            userId,
            date,
            encoded,
            type,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> postImage(
    String? userId,
    String? date,
    String? encoded,
    String? type,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #postImage,
          [
            userId,
            date,
            encoded,
            type,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteImage(
    int? id,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteImage,
          [
            id,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i9.Role>> fetchCoachRoles(String? jwtToken) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchCoachRoles,
          [jwtToken],
        ),
        returnValue: _i7.Future<List<_i9.Role>>.value(<_i9.Role>[]),
      ) as _i7.Future<List<_i9.Role>>);
  @override
  _i7.Future<void> registerUser(
    String? userId,
    String? coachId,
    String? password,
    String? name,
    String? phoneNumber,
    String? nationality,
    String? dateOfBirth,
    String? jwtToken,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [
            userId,
            coachId,
            password,
            name,
            phoneNumber,
            nationality,
            dateOfBirth,
            jwtToken,
          ],
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}

/// A class which mocks [HomePageView].
///
/// See the documentation for Mockito's code generation for more information.
class MockHomePageView extends _i1.Mock implements _i10.HomePageView {
  MockHomePageView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void setUserData(
    _i3.User? user,
    _i11.Image? profilePicture,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #setUserData,
          [
            user,
            profilePicture,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setNewsData(_i2.News? currentNews) => super.noSuchMethod(
        Invocation.method(
          #setNewsData,
          [currentNews],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setInProgress(bool? inProgress) => super.noSuchMethod(
        Invocation.method(
          #setInProgress,
          [inProgress],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void setFetched(bool? fetched) => super.noSuchMethod(
        Invocation.method(
          #setFetched,
          [fetched],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyWrongURL(String? s) => super.noSuchMethod(
        Invocation.method(
          #notifyWrongURL,
          [s],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void habitsPressed(bool? bottomBarButton) => super.noSuchMethod(
        Invocation.method(
          #habitsPressed,
          [bottomBarButton],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void profilePressed(bool? bottomBarButton) => super.noSuchMethod(
        Invocation.method(
          #profilePressed,
          [bottomBarButton],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void logOutPressed(_i11.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #logOutPressed,
          [context],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void traineesPressed(bool? bottomBarButton) => super.noSuchMethod(
        Invocation.method(
          #traineesPressed,
          [bottomBarButton],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void redirectToUrl(int? index) => super.noSuchMethod(
        Invocation.method(
          #redirectToUrl,
          [index],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void historyPressed(bool? fromBottomBar) => super.noSuchMethod(
        Invocation.method(
          #historyPressed,
          [fromBottomBar],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void templatesPressed(bool? bool) => super.noSuchMethod(
        Invocation.method(
          #templatesPressed,
          [bool],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void workoutPressed(bool? bool) => super.noSuchMethod(
        Invocation.method(
          #workoutPressed,
          [bool],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i5.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.IOSOptions get iOptions => (super.noSuchMethod(
        Invocation.getter(#iOptions),
        returnValue: _FakeIOSOptions_3(
          this,
          Invocation.getter(#iOptions),
        ),
      ) as _i5.IOSOptions);
  @override
  _i5.AndroidOptions get aOptions => (super.noSuchMethod(
        Invocation.getter(#aOptions),
        returnValue: _FakeAndroidOptions_4(
          this,
          Invocation.getter(#aOptions),
        ),
      ) as _i5.AndroidOptions);
  @override
  _i5.LinuxOptions get lOptions => (super.noSuchMethod(
        Invocation.getter(#lOptions),
        returnValue: _FakeLinuxOptions_5(
          this,
          Invocation.getter(#lOptions),
        ),
      ) as _i5.LinuxOptions);
  @override
  _i5.WindowsOptions get wOptions => (super.noSuchMethod(
        Invocation.getter(#wOptions),
        returnValue: _FakeWindowsOptions_6(
          this,
          Invocation.getter(#wOptions),
        ),
      ) as _i5.WindowsOptions);
  @override
  _i5.WebOptions get webOptions => (super.noSuchMethod(
        Invocation.getter(#webOptions),
        returnValue: _FakeWebOptions_7(
          this,
          Invocation.getter(#webOptions),
        ),
      ) as _i5.WebOptions);
  @override
  _i5.MacOsOptions get mOptions => (super.noSuchMethod(
        Invocation.getter(#mOptions),
        returnValue: _FakeMacOsOptions_8(
          this,
          Invocation.getter(#mOptions),
        ),
      ) as _i5.MacOsOptions);
  @override
  _i7.Future<void> write({
    required String? key,
    required String? value,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #write,
          [],
          {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<String?> read({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<String?>.value(),
      ) as _i7.Future<String?>);
  @override
  _i7.Future<bool> containsKey({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<bool>.value(false),
      ) as _i7.Future<bool>);
  @override
  _i7.Future<void> delete({
    required String? key,
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<Map<String, String>> readAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i7.Future<Map<String, String>>);
  @override
  _i7.Future<void> deleteAll({
    _i5.IOSOptions? iOptions,
    _i5.AndroidOptions? aOptions,
    _i5.LinuxOptions? lOptions,
    _i5.WebOptions? webOptions,
    _i5.MacOsOptions? mOptions,
    _i5.WindowsOptions? wOptions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
          {
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions,
            #webOptions: webOptions,
            #mOptions: mOptions,
            #wOptions: wOptions,
          },
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
}
